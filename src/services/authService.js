import api from './api';
import { API_URLS } from '../constants/api-urls';

// Authentication Service - Backend x·ª≠ l√Ω authentication trong USER endpoints
export const authService = {
  // Login with username and password - S·ª≠ d·ª•ng USER.LOGIN endpoint
  async login(credentials) {
    try {
      console.log('üîê Attempting login with backend API...', credentials);
      
      const response = await api.post(API_URLS.USER.LOGIN, {
        userName: credentials.username,
        password: credentials.password
      });
      
      console.log('‚úÖ Login API Response:', response.data);
      
      // Log to√†n b·ªô structure ƒë·ªÉ debug
      console.log('üîç Full response structure:', JSON.stringify(response.data, null, 2));
      
      // Backend tr·∫£ v·ªÅ token string tr·ª±c ti·∫øp
      if (response.data && typeof response.data === 'string') {
        const token = response.data;
        console.log('üîë Received token:', token.substring(0, 50) + '...');
        
        // Store token
        localStorage.setItem('accessToken', token);
        
        // Sau khi c√≥ token, g·ªçi API ƒë·ªÉ l·∫•y th√¥ng tin user hi·ªán t·∫°i
        try {
          console.log('üìã Fetching current user data with token...');
          
          // G·ªçi API ƒë·ªÉ l·∫•y th√¥ng tin user (c√≥ th·ªÉ l√† GET /api/User/profile ho·∫∑c t∆∞∆°ng t·ª±)
          // T·∫°m th·ªùi d√πng credentials ƒë·ªÉ t·∫°o userData, sau ƒë√≥ s·∫Ω update t·ª´ API
          const userData = {
            userId: Date.now().toString(),
            username: credentials.username,
            fullName: credentials.username,
            email: '',
            phone: '',
            address: '',
            status: 'Ho·∫°t ƒë·ªông',
            image: '',
            // T·∫°m th·ªùi set roleId d·ª±a tr√™n username pattern
            roleId: this.guessRoleFromUsername(credentials.username),
            createdAt: new Date().toISOString(),
          };
          
          // Map role info
          userData.role = this.mapRoleIdToRoleName(userData.roleId);
          userData.position = this.mapRoleIdToPosition(userData.roleId);
          
          console.log('‚úÖ Created user data based on username:', userData);
          console.log('üé≠ Guessed role:', userData.role);
          console.log('üíº Guessed position:', userData.position);
          
          // Check if user is Leader - only Leaders can access this web
          if (userData.role !== 'Leader') {
            console.log('‚ùå Access denied - Only Leaders can access this system');
            return {
              success: false,
              error: 'Ch·ªâ c√≥ Qu·∫£n tr·ªã h·ªá th·ªëng (Leader) m·ªõi ƒë∆∞·ª£c ph√©p truy c·∫≠p ·ª©ng d·ª•ng n√†y.'
            };
          }
          
          localStorage.setItem('userData', JSON.stringify(userData));
          
          return {
            success: true,
            data: {
              token,
              user: userData
            }
          };
          
        } catch (userFetchError) {
          console.error('‚ö†Ô∏è Could not fetch user data, using fallback:', userFetchError);
          
          // Fallback v·ªõi Worker role
          const fallbackUserData = {
            userId: Date.now().toString(),
            username: credentials.username,
            fullName: credentials.username,
            email: '',
            phone: '',
            address: '',
            status: 'Ho·∫°t ƒë·ªông',
            image: '',
            roleId: 'c2a66975-420d-4961-9edd-d5bdff89be58', // Default Worker
            role: 'Worker',
            position: 'Nh√¢n vi√™n v·ªá sinh',
            createdAt: new Date().toISOString(),
          };
          
          localStorage.setItem('userData', JSON.stringify(fallbackUserData));
          
          return {
            success: true,
            data: {
              token,
              user: fallbackUserData
            }
          };
        }
      }
      // Case hi·∫øm: Backend tr·∫£ v·ªÅ object v·ªõi token v√† user
      else if (response.data && response.data.token && response.data.user) {
        const { token, user } = response.data;
        
        console.log('üîç Backend user data:', user);
        console.log('üîç User object keys:', Object.keys(user));
        console.log('üé≠ User roleId from backend:', user.roleId);
        console.log('üé≠ User role object from backend:', user.role);
        
        // Ki·ªÉm tra xem c√≥ role object nested kh√¥ng
        if (user.role && typeof user.role === 'object') {
          console.log('üîç Nested role object:', user.role);
          console.log('üîç Nested role keys:', Object.keys(user.role));
        }
        
        // Store token
        localStorage.setItem('accessToken', token);
        
        // X·ª≠ l√Ω user data t·ª´ backend response
        const userData = {
          userId: user.userId,
          username: user.userName,
          fullName: user.fullName,
          email: user.email,
          phone: user.phone,
          address: user.address,
          status: user.status,
          image: user.image,
          roleId: user.roleId, // L·∫•y roleId t·ª´ backend
          role: this.mapRoleIdToRoleName(user.roleId), // Map roleId th√†nh role name
          position: this.mapRoleIdToPosition(user.roleId), // Map roleId th√†nh position
          createdAt: user.createdAt,
          // Th√™m role object n·∫øu c√≥
          roleObject: user.role || null,
        };
        
        // Map role info
        userData.role = this.mapRoleIdToRoleName(userData.roleId);
        userData.position = this.mapRoleIdToPosition(userData.roleId);
        
        console.log('‚úÖ Processed user data:', userData);
        console.log('üé≠ Final role:', userData.role);
        console.log('üíº Final position:', userData.position);
        
        // Check if user is Leader - only Leaders can access this web
        if (userData.role !== 'Leader') {
          console.log('‚ùå Access denied - Only Leaders can access this system');
          return {
            success: false,
            error: 'Ch·ªâ c√≥ Qu·∫£n tr·ªã h·ªá th·ªëng (Leader) m·ªõi ƒë∆∞·ª£c ph√©p truy c·∫≠p ·ª©ng d·ª•ng n√†y.'
          };
        }
        
        localStorage.setItem('userData', JSON.stringify(userData));
        
        return {
          success: true,
          data: {
            token,
            user: userData
          }
        };
      }
      else {
        return {
          success: false,
          error: 'Ph·∫£n h·ªìi t·ª´ server kh√¥ng h·ª£p l·ªá - kh√¥ng c√≥ token'
        };
      }
    } catch (error) {
      console.error('‚ùå Login API Error:', error);
      
      // Handle different error responses
      if (error.response) {
        const status = error.response.status;
        const message = error.response.data?.message || error.response.data?.errors?.[0];
        
        switch (status) {
          case 400:
            return { 
              success: false, 
              error: message || 'D·ªØ li·ªáu ƒëƒÉng nh·∫≠p kh√¥ng h·ª£p l·ªá' 
            };
          case 401:
            return { 
              success: false, 
              error: message || 'T√†i kho·∫£n ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng' 
            };
          case 403:
            return { 
              success: false, 
              error: message || 'T√†i kho·∫£n b·ªã kh√≥a ho·∫∑c kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' 
            };
          case 500:
            return { 
              success: false, 
              error: message || 'L·ªói h·ªá th·ªëng, vui l√≤ng th·ª≠ l·∫°i sau' 
            };
          default:
            return { 
              success: false, 
              error: message || 'ƒêƒÉng nh·∫≠p th·∫•t b·∫°i' 
            };
        }
      } else if (error.request) {
        return {
          success: false,
          error: 'Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng.'
        };
      } else {
        return {
          success: false,
          error: 'ƒê√£ c√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh ƒëƒÉng nh·∫≠p'
        };
      }
    }
  },

  // Register new user - S·ª≠ d·ª•ng USER.REGISTER endpoint
  async register(userData) {
    try {
      console.log('üìù Attempting registration with backend API...', userData);
      
      const response = await api.post(API_URLS.USER.REGISTER, {
        userName: userData.username,
        password: userData.password,
        fullName: userData.fullName,
        email: userData.email,
        phone: userData.phone,
        address: userData.address,
        roleId: userData.roleId || 'c2a66975-420d-4961-9edd-d5bdff89be58' // Default to worker role
      });
      
      console.log('‚úÖ Registration API Response:', response.data);
      
      return {
        success: true,
        data: response.data
      };
    } catch (error) {
      console.error('‚ùå Registration API Error:', error);
      
      if (error.response) {
        const message = error.response.data?.message || error.response.data?.errors?.[0];
        return {
          success: false,
          error: message || 'ƒêƒÉng k√Ω th·∫•t b·∫°i'
        };
      }
      
      return {
        success: false,
        error: 'Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server'
      };
    }
  },

  // Logout - Ch·ªâ clear localStorage v√¨ backend kh√¥ng c√≥ logout endpoint
  async logout() {
    try {
      // Backend kh√¥ng c√≥ logout endpoint ri√™ng, ch·ªâ clear localStorage
      console.log('üö™ Logging out - clearing local storage...');
    } catch (error) {
      console.error('Logout error (non-critical):', error);
    } finally {
      // Always clear local storage
      localStorage.removeItem('accessToken');
      localStorage.removeItem('refreshToken');
      localStorage.removeItem('userData');
    }
  },

  // Get current user profile - C√≥ th·ªÉ s·ª≠ d·ª•ng USER.GET_BY_ID n·∫øu c·∫ßn
  async getCurrentUser() {
    try {
      const userData = localStorage.getItem('userData');
      if (userData) {
        const user = JSON.parse(userData);
        // C√≥ th·ªÉ g·ªçi API ƒë·ªÉ l·∫•y th√¥ng tin m·ªõi nh·∫•t n·∫øu c·∫ßn
        // const response = await api.get(API_URLS.USER.GET_BY_ID(user.userId));
        
        return {
          success: true,
          data: user
        };
      } else {
        return {
          success: false,
          error: 'Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng'
        };
      }
    } catch (error) {
      console.error('Get current user error:', error);
      return {
        success: false,
        error: 'Kh√¥ng th·ªÉ l·∫•y th√¥ng tin ng∆∞·ªùi d√πng'
      };
    }
  },

  // Helper function to map roleId to role name
  mapRoleIdToRoleName(roleId) {
    const roleMap = {
      '0ecdd2e4-d5dc-48b4-8006-03e6b4868e75': 'Leader',      // Qu·∫£n tr·ªã h·ªá th·ªëng
      '5b7a2bcd-9f5e-4f0e-8e47-2a15bcf85e37': 'Manager',     // Qu·∫£n l√Ω c·∫•p cao  
      '7dcd71ae-17c3-4e84-bb9f-dd96fa401976': 'Supervisor',  // Gi√°m s√°t vi√™n v√† sinh
      'c2a66975-420d-4961-9edd-d5bdff89be58': 'Worker'       // Nh√¢n vi√™n v·ªá sinh
    };
    return roleMap[roleId] || 'Worker';
  },

  // Helper function to map roleId to position (Vietnamese)
  mapRoleIdToPosition(roleId) {
    const positionMap = {
      '0ecdd2e4-d5dc-48b4-8006-03e6b4868e75': 'Qu·∫£n tr·ªã h·ªá th·ªëng',
      '5b7a2bcd-9f5e-4f0e-8e47-2a15bcf85e37': 'Qu·∫£n l√Ω c·∫•p cao',
      '7dcd71ae-17c3-4e84-bb9f-dd96fa401976': 'Gi√°m s√°t vi√™n v√† sinh',
      'c2a66975-420d-4961-9edd-d5bdff89be58': 'Nh√¢n vi√™n v·ªá sinh'
    };
    return positionMap[roleId] || 'Nh√¢n vi√™n v·ªá sinh';
  },

  // Helper function to map position to roleId
  mapPositionToRoleId(position) {
    const roleIdMap = {
      'Qu·∫£n tr·ªã h·ªá th·ªëng': '0ecdd2e4-d5dc-48b4-8006-03e6b4868e75',
      'Qu·∫£n l√Ω c·∫•p cao': '5b7a2bcd-9f5e-4f0e-8e47-2a15bcf85e37',
      'Gi√°m s√°t vi√™n v√† sinh': '7dcd71ae-17c3-4e84-bb9f-dd96fa401976',
      'Nh√¢n vi√™n v·ªá sinh': 'c2a66975-420d-4961-9edd-d5bdff89be58'
    };
    return roleIdMap[position] || 'c2a66975-420d-4961-9edd-d5bdff89be58';
  },

  // Check if user is authenticated
  isAuthenticated() {
    const token = localStorage.getItem('accessToken');
    const userData = localStorage.getItem('userData');
    
    if (!token || !userData) {
      return false;
    }
    
    // Additional check: Only Leaders can access this system
    try {
      const user = JSON.parse(userData);
      if (user.role !== 'Leader') {
        console.log('‚ùå Authentication failed - User is not a Leader');
        // Clear invalid user data
        this.logout();
        return false;
      }
      return true;
    } catch (error) {
      console.error('Error parsing user data:', error);
      return false;
    }
  },

  // Get current user from localStorage
  getCurrentUserFromStorage() {
    try {
      const userData = localStorage.getItem('userData');
      return userData ? JSON.parse(userData) : null;
    } catch (error) {
      console.error('Error parsing user data from storage:', error);
      return null;
    }
  },

  // Helper function to guess role based on username pattern
  guessRoleFromUsername(username) {
    const lowerUsername = username.toLowerCase();
    
    // Pattern matching cho role d·ª±a tr√™n username
    if (lowerUsername.includes('leader') || lowerUsername.includes('admin') || lowerUsername.includes('system')) {
      return '0ecdd2e4-d5dc-48b4-8006-03e6b4868e75'; // Leader - Qu·∫£n tr·ªã h·ªá th·ªëng
    }
    else if (lowerUsername.includes('manager') || lowerUsername.includes('quanly')) {
      return '5b7a2bcd-9f5e-4f0e-8e47-2a15bcf85e37'; // Manager - Qu·∫£n l√Ω c·∫•p cao
    }
    else if (lowerUsername.includes('supervisor') || lowerUsername.includes('giamsat')) {
      return '7dcd71ae-17c3-4e84-bb9f-dd96fa401976'; // Supervisor - Gi√°m s√°t vi√™n
    }
    else {
      return 'c2a66975-420d-4961-9edd-d5bdff89be58'; // Default Worker - Nh√¢n vi√™n v·ªá sinh
    }
  }
};

export default authService; 